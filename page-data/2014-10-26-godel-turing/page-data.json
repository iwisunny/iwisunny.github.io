{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014-10-26-godel-turing/","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"WangXi Blog","author":"sunny wang"}},"markdownRemark":{"id":"44a5ea8f-c1d5-5ba5-8555-4d0e5b1f0d6a","excerpt":"我看到了它，却不敢相信它。 --康托尔 计算机是数学家一次失败思考的产物。 --无名氏 震撼了20世纪数学界的天空，其数学意义颠覆了希尔伯特的形式化数学的宏伟计划，\n其哲学意义直到2…","html":"<blockquote>\n<p>我看到了它，却不敢相信它。 --康托尔</p>\n</blockquote>\n<blockquote>\n<p>计算机是数学家一次失败思考的产物。 --无名氏</p>\n</blockquote>\n<p><code class=\"language-text\">哥德尔不完备性定理</code>震撼了20世纪数学界的天空，其数学意义颠覆了希尔伯特的形式化数学的宏伟计划，\n其哲学意义直到21世纪的今天仍然不断被延伸到各个自然学科，深刻影响着人们的思维。\n图灵为了解决希尔伯特著名的第十问题而提出有效计算模型，\n进而作出了可计算理论和现代计算机的奠基性工作，著名的停机问题给出了机械计算模型的能力极限，\n其深刻的意义和漂亮的证明使它成为可计算理论中的标志性定理之一。</p>\n<p>丘齐，跟图灵同时代的天才，则从另一个抽象角度提出了<code class=\"language-text\">lambda算子</code>的思想，与图灵机抽象的倾向于硬件性不同，\n丘齐的lambda算子理论是从数学的角度进行抽象，不关心运算的机械过程而只关心运算的抽象性质，\n只用最简洁的几条公理便建立起了与图灵机完全等价的计算模型，其体现出来的数学抽象美开出了函数式编程语言这朵奇葩，\nLisp、Scheme、Haskell… 这些以抽象性和简洁美为特点的语言至今仍然活跃在计算机科学界，\n虽然由于其本质上源于lambda算子理论的抽象方式不符合人的思维习惯从而注定无法成为主流的编程语言，\n然而这仍然无法妨碍它们成为编程理论乃至计算机学科的最佳教本。\n而诞生于函数式编程语言的神奇的Y combinator至今仍然让人们陷入深沉的震撼和反思当中…</p>\n<p>然而，这一切的一切，看似不很相关却又有点相关，认真思考其关系却又有点一头雾水的背后，其实隐隐藏着一条线，\n这条线把它们从本质上串到了一起，而顺着时光的河流逆流而上，我们将会看到，这条线的尽头，不是别人，\n正是只手拨开被不严密性问题困扰的19世纪数学界阴沉天空的天才数学家康托尔，\n康托尔创造性地将一一对应和对角线方法运用到无穷集合理论的建立当中，\n这个被希尔伯特称为“谁也无法将我们从康托尔为我们创造的乐园中驱逐出去”、被罗素称为“19世纪最伟大的智者之一”的人，\n他在集合论方面的工作终于驱散了不严密性问题带来的阴霾，仿佛一道金色的阳光刺破乌云，\n19世纪的数学终于看到了真正严格化的曙光，数学终于得以站在了前所未有的坚固的基础之上；\n集合论至今仍是数学里最基础和最重要的理论之一。\n而康托尔当初在研究无穷集合时最具天才的方法之一——对角线方法——则带来了极其深远的影响，\n其纯粹而直指事物本质的思想如洪钟大吕般响彻数学和哲学的每一个角落。</p>\n<p>随着本文的展开，你将会看到，刚才提到的一切，哥德尔的不完备性定理，图灵的停机问题，lambda算子理论中神奇的<code class=\"language-text\">Y combinator</code>、\n乃至著名的罗素悖论等等，其实都源自这个简洁、纯粹而同时又是最优美的数学方法，\n反过来说，从康托尔的对角线方法出发，我们可以轻而易举地推导出哥德尔的不完备性定理，\n而由后者又可以轻易导出停机问题和Y combinator，实际上，我们将会看到，后两者也可以直接由康托尔的对角线方法导出。\n尤其是Y combinator，这个形式上绕来绕去，本质上捉摸不透，看上去神秘莫测的算子，其实只是一个非常自然而然的推论，\n如果从哥德尔的不完备性定理出发，它甚至比停机问题还要来得直接简单。\n总之，你将会看到这些看似深奥的理论是如何由一个至为简单而又至为深刻的数学方法得出的，你将会看到最纯粹的数学美。</p>\n<h4>图灵停机问题(The Halting Problem)</h4>\n<blockquote>\n<p>不存在这样一个程序（算法），它能够计算任何程序（算法）在给定输入上是否会结束（停机）。</p>\n</blockquote>\n<p>那么，如何来证明这个停机问题呢？反证。</p>\n<p>假设我们某一天真做出了这么一个极度聪明的万能算法（就叫God_algo吧），你只要给它一段程序（二进制描述），\n再给它这段程序的输入，它就能告诉你这段程序在这个输入上会不会结束（停机），我们来编写一下我们的这个算法吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bool God_algo(char* program, char* input)\n{\n\nif({program} halts on {input})\n\nreturn true;\n\nreturn false;\n\n}</code></pre></div>\n<p>这里我们假设if 的判断语句里面是你天才思考的结晶，它能够像上帝一样洞察一切程序的宿命。\n现在，我们从这个God_algo出发导出一个新的算法：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bool Satan_algo(char* program)\n{\n\nif( God_algo(program, program) ){\n\nwhile(1); // loop forever!\n\nreturn false; // can never get here!\n\n}\n\nelse\n\nreturn true;\n\n}</code></pre></div>\n<p>正如它的名字所暗示的那样，这个算法便是一切邪恶的根源了。当我们把这个算法运用到它自身身上时，会发生什么呢？</p>\n<p><code class=\"language-text\">Satan_algo(Satan_algo);</code></p>\n<p>我们来分析一下这行简单的调用：</p>\n<p>显然，Satan<em>algo(Satan</em>algo)这个调用要么能够运行结束返回（停机），要么不能返回（loop forever）。</p>\n<p>如果它能够结束，那么Santa<em>algo算法里面的那个if判断就会成立（因为God</em>algo(Santa<em>algo,Santa</em>algo)将会返回true），\n从而程序便进入那个包含一个无穷循环while(1);的if分支，于是这个Satan<em>algo(Satan</em>algo)调用便永远不会返回（结束）了。</p>\n<p>而如果Satan<em>algo(Satan</em>algo)不能结束（停机）呢，则if判断就会失败，从而选择另一个if分支并返回true，\n即Satan<em>algo(Satan</em>algo)又能够返回（停机）。</p>\n<p>总之，我们有：</p>\n<blockquote>\n<p>Satan<em>algo(Satan</em>algo) 能够停机 => 它不能停机</p>\n</blockquote>\n<blockquote>\n<p>Satan<em>algo(Satan</em>algo) 不能停机 => 它能够停机</p>\n</blockquote>\n<p>所以它停也不是，不停也不是。左右矛盾。</p>\n<p>于是，我们的假设，即God_algo算法的存在性，便不成立了。\n正如拉格朗日所说：“陛下，我们不需要（上帝）这个假设”。</p>\n<p>这个证明相信每个程序员都能够容易的看懂。然而，这个看似不可捉摸的技巧背后其实隐藏着深刻的数学原理（甚至是哲学原理）。\n在没有认识到这一数学原理之前，至少我当时是对于图灵如何想出这一绝妙证明感到无法理解。\n但后面，在介绍完了与图灵的停机问题“同构”的Y combinator之后，我们会深入哥德尔的不完备性定理，\n在理解了哥德尔不完备性定理之后，\n我们从这一同样绝妙的定理出发，就会突然发现，离停机问题和神奇的Y combinator只是咫尺之遥而已。</p>","frontmatter":{"title":"从哥德尔到图灵","date":"October 26, 2014","description":"计算机是数学家一次失败思考的产物"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2014-10-26-godel-turing/","previous":{"fields":{"slug":"/2014-10-26-google-advanced-operators/"},"frontmatter":{"title":"google搜索算子"}},"next":{"fields":{"slug":"/2014-10-29-vagrant-install-lnmp/"},"frontmatter":{"title":"vagrant with LNMP stack"}}}}}