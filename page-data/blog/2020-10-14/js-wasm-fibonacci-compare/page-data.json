{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020-10-14/js-wasm-fibonacci-compare","result":{"data":{"site":{"siteMetadata":{"title":"sunny.w","author":"sunny wang"}},"markdownRemark":{"id":"01c1908f-e1b5-591b-b2b5-478986e556ce","excerpt":"Rust 环境准备 我准备用来编译到，当然你也可以用 , ,  来 compile 到 wasm. 首选准备 rust 环境，安装 创建 rust lib，编译到 wasm 使用 cargo(rust 的包管理器和 build 工具) 创建一个 type 为 library 的项目 cargo 初始化的目录结构是 就是要编译到 wasm 的 rust…","html":"<p><img src=\"/images/js-wasm-bench.png\"></p>\n<h2>Rust 环境准备</h2>\n<p>我准备用<code class=\"language-text\">rust</code>来编译到<code class=\"language-text\">wasm</code>，当然你也可以用 <code class=\"language-text\">c/c++</code>, <code class=\"language-text\">go</code>, <code class=\"language-text\">assemblyScript/typescript</code> 来 compile 到 wasm.</p>\n<p>首选准备 rust 环境，安装<code class=\"language-text\">rustup</code></p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">curl --proto &#39;=https&#39; --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\nexport PATH=&quot;$HOME/.cargo/bin:$PATH&quot;\n\n# 检查rustc 安装成功\nrustc --version\n# 检查 cargo 安装成功\ncargo --version\n\n# 安装wasm的编译目标\nrustup target add wasm32-unknown-unknown</code></pre></div>\n<h2>创建 rust lib，编译到 wasm</h2>\n<p>使用 cargo(rust 的包管理器和 build 工具) 创建一个 type 为 library 的项目</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">cargo new begin_wasm --lib</code></pre></div>\n<p>cargo 初始化的目录结构是</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── Cargo.toml\n└── src\n    └── lib.rs</code></pre></div>\n<p><code class=\"language-text\">src/lib.rs</code>就是要编译到 wasm 的 rust 文件，先加入斐波那契数的函数，稍后编译到 wasm 里。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> u64 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> n <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">0</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">1</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>编译到 wasm</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">cargo build --target wasm32-unknown-unknown</code></pre></div>\n<p>这时在项目目录下会多出一个<code class=\"language-text\">target</code>目录，默认 cargo 是在 debug 模式下编译，wasm 文件体积会稍大点。\n生成的 wasm 文件在 <code class=\"language-text\">target/wasm32-unknwon-unknown/debug/begin_wasm.wasm</code></p>\n<h2>JS 端创建测试页面</h2>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">touch index.html</code></pre></div>\n<p>index.html 的内容如下</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>rust wasm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Fibnacci benchmark: JS vs Wasm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>result<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fib-js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fib-wasm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> wasm_file <span class=\"token operator\">=</span> <span class=\"token string\">\"target/wasm32-unknown-unknown/debug/begin_wasm.wasm\"</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fib</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> t1 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> res_js <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"fib-js\"</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">==JS==: Calc fib(40), time=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>t2 <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>\n        <span class=\"token number\">1000</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">s, res=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res_js<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n      <span class=\"token keyword\">const</span> memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> initial<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> maximum<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// alloc wasm memory size</span>\n\n      WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>wasm_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        js<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> mem<span class=\"token operator\">:</span> memory <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> wasm_exports <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports\n\n        <span class=\"token keyword\">const</span> t1 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> res_wasm <span class=\"token operator\">=</span> wasm_exports<span class=\"token punctuation\">.</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"fib-wasm\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">==WASM==: Calc fib(40), time=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>t2 <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>\n          <span class=\"token number\">1000</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">s, res=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res_wasm<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>开启本地 http server</h2>\n<p>本地测试的话，可以有很多方式开启 http server，你可以用 cargo 安装 rust 版的 http server</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">cargo install https\n\nhttp  # 启动http server</code></pre></div>\n<p>也可以 nodejs 的 npm 安装 http server</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">npm i http-server\n\nhttp-server .</code></pre></div>\n<p>然后打开浏览器(比如我的 chrome)，进到测试页面, benchmark 对比：</p>\n<p><img src=\"/images/js-wasm-fib.jpg\"></p>\n<h2>总结</h2>\n<p>以上是对比 js 和 wasm 计算 斐波那契数列的第 42 项，也是很大的一个数了，js 用的时间竟然比 wasm 少?（什么原因呢，各位观众可以在评论区留言发表看法:-p）\nwasm 的性能和 c/c++差不多，这里应该是 chrome v8 引擎在处理 js 的计算时做了编译优化，让 js 计算 fib(42) 甚至比 wasm 还快。</p>\n<p>当然局部的 benchmark 对比看不出什么优势，在重计算的项目(cpu 密集型)中，wasm 的优势就会比 js 明显。</p>\n<p>未来 WASM 会和 JS 优势互补，二者不是对立的关系，wasm 也不会取代 js，wasm 只是增强了 js，就像 typescript 只是给 js 加了类型和静态分析。</p>\n<p>很愉快的 WASM 之旅，happy coding :)</p>","frontmatter":{"title":"javascript vs webassembly fibonacci benchmark","date":"October 14, 2020","description":"JS和WASM的斐波那契数计算的性能对比，很有趣...","tags":["js","wasm"]}}},"pageContext":{"slug":"/2020-10-14/js-wasm-fibonacci-compare","previous":null,"next":{"fields":{"slug":"/2020-10-14/styled-components-add-media-query"},"frontmatter":{"title":"styled-components add media query"}}}},"staticQueryHashes":["1824009237","63159454","636771615"]}